#include "msp.h"
#include "stdint.h"
  volatile uint32_t i,j;
  
int main(void)
{
    // Hold the watchdog

    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;


    // Configuring P2.1 and P2.2 as output and P1.4 (switch) as input with pull-up
    // resistor. Rest of pins are configured as output low.
    // Notice intentional '=' assignment since all P1 pins are being
    // deliberately configured
    P1->DIR = ~(uint8_t) BIT4;
    P1->OUT = BIT4;
    P1->REN = BIT4;                         // Enable pull-up resistor (P1.1 output high)
    P1->SEL0 = 0;
    P1->SEL1 = 0;
    P1->IES = BIT4;                         // Interrupt on high-to-low transition
    P1->IFG = 0;                            // Clear all P1 interrupt flags
    P1->IE = BIT4;                          // Enable interrupt for P1.1

    // Enable Port 1 interrupt on the NVIC
    NVIC->ISER[1] = 1 << ((PORT1_IRQn) & 31);

    // Terminate all remaining pins on the device
     P2->DIR |= BIT1;
     P2->OUT |= BIT1;
     P2->DIR |= BIT2;
     P2->OUT &= ~BIT2;

    P3->DIR |= 0xFF; P3->OUT = 0;
    P4->DIR |= 0xFF; P4->OUT = 0;
    P5->DIR |= 0xFF; P5->OUT = 0;
    P6->DIR |= 0xFF; P6->OUT = 0;
    P7->DIR |= 0xFF; P7->OUT = 0;
    P8->DIR |= 0xFF; P8->OUT = 0;
    P9->DIR |= 0xFF; P9->OUT = 0;
    P10->DIR |= 0xFF; P10->OUT = 0;

    // Enable global interrupt
    __enable_irq();

    // Setting the sleep deep bit
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk);

    // Do not wake up on exit from ISR
    SCB->SCR |= SCB_SCR_SLEEPONEXIT_Msk;

    TIMER_A0->CCTL[0] = TIMER_A_CCTLN_CCIE; // TACCR0 interrupt enabled
                  TIMER_A0->CCR[0] = 65530;
                  TIMER_A0->CTL = TIMER_A_CTL_SSEL__SMCLK | // SMCLK, continuous mode
                          TIMER_A_CTL_MC__CONTINUOUS;
                  NVIC->ISER[0] = 1 << ((TA0_0_IRQn) & 31);

                  while (1)
                         {
                             __sleep();

                             __no_operation();                   // For debugger
                      }
}

/* Port1 ISR */
void PORT1_IRQHandler(void)
{
     if(P1->IFG & BIT4)
     {
         if(NVIC->ISER[0])
             NVIC->ICER[0] = 1 << ((TA0_0_IRQn) & 31);
         else
             NVIC->ISER[0] = 1 << ((TA0_0_IRQn) & 31);
     }

    // Delay for switch debounce
     for(i = 0; i < 10000; i++);
         P1->IFG &= ~BIT4;
}

void TA0_0_IRQHandler(void) {
    TIMER_A0->CCTL[0] &= ~TIMER_A_CCTLN_CCIFG;
    j++;
    if(j==25)
    {
        P2->OUT ^= BIT2;
        P2->OUT ^= BIT1;
        j=0;
    }
            TIMER_A0->CCR[0] += 65530;
    }
